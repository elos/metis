{{define "Accessors"}}
    {{template "TraitAccessors" .}}

    {{template "RelationshipAccessors" .}}
{{end}}

{{define "TraitAccessors"}}
    {{with $model := .}}
        {{range $name, $trait := .Traits}}
            func (f *{{$model.Kind}}) {{export (camel $name)}}() {{goTypeFor $trait.Type}} {
                return f.{{attr $trait.Name}}
            }

            func (f *{{$model.Kind}}) Set{{export (camel $name)}}(v {{goTypeFor $trait.Type}}) {
                f.{{attr $trait.Name}} = v
            }
        {{end}}
    {{end}}
{{end}}

{{define "RelationshipAccessors"}}
    {{with $model := .}}
        {{range $name, $relationship := .Relationships}}
            {{if isMul $relationship}}
                {{template "MulRel" dict "model" $model "name" $name "relationship" $relationship}}
            {{else}}
                {{template "OneRel" $relationship}}
            {{end}}
        {{end}}
    {{end}}
{{end}}

{{define "MulRel"}}
    func ({{firstLetter .model.Kind}} *{{.model.Kind}}) Include{{export .name}}(o models.{{export .relationship.Other}}) error {
        return {{firstLetter .model.Kind}}.Schema().Link(f, o, {{.relationship.Other}})
    }

    func ({{firstLetter .model.Kind}} *{{.model.Kind}}) Exclude{{export .name}}(o models.{{export .relationship.Other}}) error {
        return {{firstLetter .model.Kind}}.Schema().Unlink(f, o, {{.relationship.Other}})
    }

    func ({{firstLetter .model.Kind}} *{{.model.Kind}}) {{export .name}}Iter(s models.Store) (data.ModelIterator, error) {
        if !s.Compatible({{firstLetter .model.Kind}}) {
            return nil, data.ErrInvalidDBType
        }

        return mongo.NewIDIter({{firstLetter .model.Kind}}.{{export (. relationship).Other}}IDs, s), nil
    }

    func (f *{{.model.Kind}} {{export .name}}s(s models.Store) (data.ModelIterator, error) {
            {{with $otherPlural := appendStrings .relationship.Other "s"}}
            {{with $otherSingular := .relationship.Other}}

            if !s.Compatible(u) {
                return nil, data.ErrInvalidDBType
            }

            {{$otherPlural}} := make([]models.{{export .relationship.Other}}, 0)
            iter := monog.NewIdIter(u.{{export .name}}IDs, s)
            {{$otherSingular}} := s.{{export .relationship.Other}}()
            for iter.Next({{$otherSingular}}) {
                {{$otherPlural}} = append({{$otherPlural}}, {{$otherSingular}})
                {{$otherSingular}} = s.{{export .relationship.Other}}()
            }

            return {{$otherPlural}}, nil
            {{end}}
            {{end}}
    }
{{end}}

{{define "OneRel"}}
{{end}}
