{{define "ROOT"}}
    {{template "File" $}}
{{end}}

{{define "File"}}
    package models
    // THIS FILE GENERATED BY METIS

    import (
            "github.com/elos/d/builtin/mongo"
            )

    // this type def generated by metis
    {{typeDefinition .Model}}

    {{template "Constructor" $}}

    {{template "Kind" $}}
    {{template "Concerned" $}}

    {{template "IDAccessors" $}}

    {{traitAccessors .Model}}

    {{with $model := .Model}}
        {{range $key, $link := $model.Links}}
            {{if isMul $link}}
                {{template "MulAccessors" mulLinkAccessorsVar $model $link}}
            {{else}}
                {{template "OneAccessors" oneLinkAccessorsVar $model $link}}
            {{end}}
        {{end}}
    {{end}}

    {{template "BSON" $}}
{{end}}

{{define "Constructor"}}
func New{{name .Kind}}() *{{name .Kind}} {
    return &{{name .Kind}}{}
}
{{end}}

{{define "Kind"}}
// Kind is derived from the models package and is
// defined in type.go, shared among implementations
{{sig .Model}} Kind() d.Kind {
        return {{export (camel .Model.Kind)}}Kind
}
{{end}}

{{define "Schema"}}
// Schema is derived from the models package and is
// defined in type.go, shared among implementations
{{sig .Model}} Schema() d.Schema {
        return Schema
}
{{end}}

{{define "Version"}}
// Version is derived from the models package and is
// defined in type.go, shared among implementations
{{sig .Model}} Version() int {
        return  1
}
{{end}}

{{define "DBType"}}
// here for backwards compatibility
{{sig .Model}} DBType() d.DBType {
        return mongo.DBType
}
{{end}}

{{define "Valid"}}
// mocked
{{sig .Model}} Valid() bool {
    return true
}
{{end}}

{{define "Concerned"}}
// just returns itself for now
{{sig .Model}} Concerned() []d.ID {
    foo := make([]d.ID, 1)
    foo[0] = {{this .Model}}.ID()
    return foo
}
{{end}}

{{define "AccessControl"}}
// mock
{{sig .Model}} CanRead(client d.Client) bool {
    return true
}

// mock
{{sig .Model}} CanWrite(client d.Client) bool {
    return true
}
{{end}}

{{define "IDAccessors"}}
{{sig .Model}} SetID(id d.ID)  {
    {{this .Model}}.Id = id.String()
}

{{sig .Model}} ID() d.ID {
    return d.ID({{this .Model}}.Id)
}
{{end}}
