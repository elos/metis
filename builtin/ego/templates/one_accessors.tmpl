{{define "OneAccessors"}}
{{template "Setter" $}}
{{template "Getter" $}}
{{template "OrCreate" $}}
{{end}}

{{define "Setter"}}
{{sig .Model}} Set{{name .This.Relation.Name}}({{camel .Other.Kind}}Argument {{.Other.Type}}) error {
    {{this .Model}}.{{relationFieldName .This.Relation}} = {{camel .Other.Kind}}Argument.ID().String()
    return nil
}
{{end}}

{{define "Getter"}}
{{sig .Model}} {{name .This.Relation.Name}}(db data.DB) ({{.Other.Type}}, error) {
    if {{this .Model}}.{{relationFieldName .This.Relation}} == "" {
        return nil, ErrEmptyLink
    }

    {{if .Other.IsPhysical}}
        {{camel .Other.Kind}}Argument := New{{name .Other.Kind}}()
        pid, _ := mongo.ParseObjectID({{this .Model}}.{{relationFieldName .This.Relation}})
        {{camel .Other.Kind}}Argument.SetID(data.ID(pid.Hex()))
        return {{camel .Other.Kind}}Argument, db.PopulateByID({{camel .Other.Kind}}Argument)
    {{else}}
        m := ModelFor(data.Kind({{this .Model}}.{{name .This.Relation.Name}}Kind))
        {{camel .Other.Kind}} := m.({{.Other.Type}})

        pid, _ := mongo.ParseObjectID({{this .Model}}.{{relationFieldName .This.Relation}})

        {{camel .Other.Kind}}.SetID(data.ID(pid.Hex()))
        return {{camel .Other.Kind}}, db.PopulateByID({{camel .Other.Kind}})
    {{end}}
}
{{end}}

{{define "OrCreate"}}
{{if .Other.IsPhysical}}
{{sig .Model}} {{name .This.Relation.Name}}OrCreate(db data.DB) ({{.Other.Type}}, error) {
    {{camel .Other.Kind}}, err := {{this .Model}}.{{name .This.Relation.Name}}(db)

    if err == ErrEmptyLink {
        {{camel .Other.Kind}} := New{{name .Other.Kind}}()
        {{camel .Other.Kind}}.SetID(db.NewID())
        if err := {{this .Model}}.Set{{name .This.Relation.Name}}({{camel .Other.Kind}}); err != nil {
            return nil, err
        }

        if err := db.Save({{camel .Other.Kind}}); err != nil {
            return nil, err
        }

        if err := db.Save({{this .Model}}); err != nil {
            return nil, err
        }

        return {{camel .Other.Kind}}, nil
    } else {
        return {{camel .Other.Kind}}, err
    }
}
{{end}}
{{end}}
