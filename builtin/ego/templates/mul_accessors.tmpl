{{define "MulAccessors"}}
{{template "Include" $}}
{{template "Exclude" $}}
{{template "Iter" $}}
{{template "List" $}}
{{end}}

{{define "Include"}}
{{sig .Model}} Include{{name .This.Relation.Singular}}({{camel .This.Relation.Singular}} {{.Other.Type}}) {
    otherID := {{camel .This.Relation.Singular}}.ID().String()
    for i := range {{camel .Model.Kind}}.{{relationFieldName .This.Relation}} {
        if {{camel .Model.Kind}}.{{relationFieldName .This.Relation}}[i] == otherID {
            return
        }
    }
    {{camel .Model.Kind}}.{{relationFieldName .This.Relation}} = append({{camel .Model.Kind}}.{{relationFieldName .This.Relation}}, otherID)
}
{{end}}

{{define "Exclude"}}
{{sig .Model}} Exclude{{name .This.Relation.Singular}}({{camel .This.Relation.Singular}} {{.Other.Type}}) {
    tmp := make([]string, 0)
    id := {{camel .This.Relation.Singular}}.ID().String()
    for _, s := range {{camel .Model.Kind}}.{{relationFieldName .This.Relation}} {
        if s != id {
            tmp = append(tmp, s)
        }
    }
    {{camel .Model.Kind}}.{{relationFieldName .This.Relation}} = tmp
}
{{end}}

{{define "Iter"}}
{{sig .Model}} {{name .This.Relation.Name}}Iter(db data.DB) (data.Iterator, error) {
    // not yet completely general
    return mongo.NewIDIter(mongo.NewIDSetFromStrings({{camel .Model.Kind}}.{{relationFieldName .This.Relation}}), db), nil
}
{{end}}

{{define "List"}}
{{sig .Model}} {{name .This.Relation.Name}}(db data.DB) ({{.This.Relation.Name}} []{{.Other.Type}}, err error) {
    {{.This.Relation.Name}} = make([]{{.Other.Type}}, len({{camel .Model.Kind}}.{{relationFieldName .This.Relation}}))
    {{.This.Relation.Singular}} := New{{name .Other.Kind}}()
    for i, id := range {{camel .Model.Kind}}.{{relationFieldName .This.Relation}} {
        {{.This.Relation.Singular}}.Id = id
        if err = db.PopulateByID({{.This.Relation.Singular}}); err != nil {
            return
        }

        {{.This.Relation.Name}}[i] = {{.This.Relation.Singular}}
        {{.This.Relation.Singular}} = New{{name .Other.Kind}}()
    }

    return
}
{{end}}
