{{define "ROOT"}}
    {{template "File" $}}
{{end}}

{{define "File"}}
    package models
    // THIS FILE GENERATED BY METIS

    // this type def generated by metis
    {{typeDefinition .Model}}

    {{template "Constructor" $}}
    {{template "Find" $}}

    {{template "Kind" $}}
    {{template "Concerned" $}}

    {{template "IDAccessors" $}}

    {{traitAccessors .Model}}

    {{with $model := .Model}}
        {{range $key, $relation := $model.Relations}}
            {{if isMul $relation}}
                {{template "MulAccessors" mulRelationAccessorsVar $model $relation}}
            {{else}}
                {{template "OneAccessors" oneRelationAccessorsVar $model $relation}}
            {{end}}
        {{end}}
    {{end}}

    {{template "BSON" $}}

{{end}}

{{define "Constructor"}}
func New{{name .Kind}}() *{{name .Kind}} {
    return &{{name .Kind}}{}
}
{{end}}

{{define "Kind"}}
// Kind is derived from the models package and is
// defined in type.go, shared among implementations
{{sig .Model}} Kind() data.Kind {
        return {{export (camel .Model.Kind)}}Kind
}
{{end}}

{{define "Concerned"}}
// just returns itself for now
{{sig .Model}} Concerned() []data.ID {
    foo := make([]data.ID, 1)
    foo[0] = {{this .Model}}.ID()
    return foo
}
{{end}}

{{define "AccessControl"}}
// mock
{{sig .Model}} CanRead(client d.Client) bool {
    return true
}

// mock
{{sig .Model}} CanWrite(client d.Client) bool {
    return true
}
{{end}}

{{define "IDAccessors"}}
{{sig .Model}} SetID(id data.ID)  {
    {{this .Model}}.Id = id.String()
}

{{sig .Model}} ID() data.ID {
    return data.ID({{this .Model}}.Id)
}
{{end}}

{{define "Find"}}
    {{with $model := .Model}}
        {{with $name := (name $model.Kind)}}
        func Find{{$name}}(db data.DB, id data.ID) (*{{$name}}, error) {
            {{with $modelVar := (camel $model.Kind)}}

                {{$modelVar}} := New{{$name}}()
                {{$modelVar}}.SetID(id)

                return {{$modelVar}}, db.PopulateByID({{$modelVar}})
            {{end}}
        }
        {{end}}
    {{end}}
{{end}}
